diff --git a/firmware/target/hosted/sdl/button-sdl.c b/firmware/target/hosted/sdl/button-sdl.c
index b5f3720a3b..b3057d6273 100644
--- a/firmware/target/hosted/sdl/button-sdl.c
+++ b/firmware/target/hosted/sdl/button-sdl.c
@@ -228,32 +228,31 @@ static bool event_handler(SDL_Event *event)
                 sdl_app_has_input_focus = 0;
         }
         break;
-    case SDL_KEYDOWN:
     case SDL_KEYUP:
-        ev_key = event->key.keysym.sym;
-#if (CONFIG_PLATFORM & PLATFORM_MAEMO5)
-        /* N900 with shared up/down cursor mapping. Seen on the German,
-           Finnish, Italian, French and Russian version. Probably more. */
-        if (event->key.keysym.mod & KMOD_MODE || n900_updown_key_pressed)
-        {
-            /* Prevent stuck up/down keys: If you release the ALT key before the cursor key,
-               rockbox will see a KEYUP event for left/right instead of up/down and
-               the previously pressed up/down key would stay active. */
-            if (ev_key == SDLK_LEFT || ev_key == SDLK_RIGHT)
-            {
-                if (event->type == SDL_KEYDOWN)
-                    n900_updown_key_pressed = 1;
-                else
-                    n900_updown_key_pressed = 0;
-            }
-
-            if (ev_key == SDLK_LEFT)
-                ev_key = SDLK_UP;
-            else if (ev_key == SDLK_RIGHT)
-                ev_key = SDLK_DOWN;
-        }
-#endif
-        button_event(ev_key, event->type == SDL_KEYDOWN);
+    	//printf("keyup: %d\n", event->key.keysym.scancode);
+    	//fflush(stdout);
+		button_event(14,  0);
+		button_event(3,   0);
+		button_event(6,   0);
+		button_event(5,   0);
+		button_event(28,  0);
+		button_event(7,   0);
+		button_event(8,   0);
+		button_event(9,   0);
+		button_event(10,  0);
+		button_event(69,  0);
+		button_event(102, 0);
+		
+    case SDL_KEYDOWN:
+    	//printf("keydown: %d\n", event->key.keysym.scancode);
+    	//fflush(stdout);
+    	if (event->key.keysym.scancode == 223)
+    		sdl_sys_quit();
+        ev_key = event->key.keysym.scancode;
+
+		if (event->key.keysym.scancode != 64){
+	        	button_event(ev_key, 1);
+		}
         break;
 #ifdef HAVE_TOUCHSCREEN
     case SDL_MOUSEMOTION:
@@ -290,22 +289,25 @@ static bool event_handler(SDL_Event *event)
 void gui_message_loop(void)
 {
     SDL_Event event;
-    bool quit;
+    bool quit = false;
 
-    do {
-        /* wait for the next event */
-        if(SDL_WaitEvent(&event) == 0) {
-            printf("SDL_WaitEvent(): %s\n", SDL_GetError());
-            return; /* error, out of here */
-        }
+    while (!quit) {
+        /* poll for the next event */
+        while (SDL_PollEvent(&event)) {
+            sim_enter_irq_handler();  // Simulate entering IRQ handler
+            quit = event_handler(&event);  // Process the event and check if quit is set
+            sim_exit_irq_handler();  // Simulate exiting IRQ handler
 
-        sim_enter_irq_handler();
-        quit = event_handler(&event);
-        sim_exit_irq_handler();
+            if (quit) {
+                break;  // Exit the event loop if quit flag is set
+            }
+        }
 
-    } while(!quit);
+        // You can add additional tasks here, such as rendering or game logic
+    }
 }
 
+
 static void button_event(int key, bool pressed)
 {
     int new_btn = 0;
