diff --git a/src/ScreenPMD85.cpp b/src/ScreenPMD85.cpp
index d95e516..9f07ef6 100644
--- a/src/ScreenPMD85.cpp
+++ b/src/ScreenPMD85.cpp
@@ -18,6 +18,14 @@
 #include "CommonUtils.h"
 #include "ScreenPMD85.h"
 #include "Emulator.h"
+#include <fcntl.h>
+#include <sys/ioctl.h>
+#include <sys/mman.h>
+#include <linux/fb.h>
+#include <unistd.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
 //-----------------------------------------------------------------------------
 ScreenPMD85::ScreenPMD85(TDisplayMode dispMode, int border)
 {
@@ -44,16 +52,7 @@ ScreenPMD85::ScreenPMD85(TDisplayMode dispMode, int border)
 //-----------------------------------------------------------------------------
 ScreenPMD85::~ScreenPMD85()
 {
-	SDL_LockMutex(displayModeMutex);
-	ReleaseVideoMode();
-
-	if (scanlinerTexture) {
-		SDL_DestroyTexture(scanlinerTexture);
-		scanlinerTexture = NULL;
-	}
 
-	SDL_UnlockMutex(displayModeMutex);
-	SDL_DestroyMutex(displayModeMutex);
 }
 //-----------------------------------------------------------------------------
 void ScreenPMD85::ReleaseVideoMode()
@@ -181,50 +180,44 @@ TColor ScreenPMD85::GetColorAttr(int idx)
 		return TColor::BLACK;
 }
 //---------------------------------------------------------------------------
+
 void ScreenPMD85::RefreshDisplay()
 {
-	if (SDL_TryLockMutex(displayModeMutex) != 0)
-		return;
+	//if (SDL_TryLockMutex(displayModeMutex) != 0)
+	//	return;
 
-	PrepareScreen();
-	SDL_RenderCopy(gdc.renderer, screenTexture, NULL, screenRect);
-
-	if (scanlinerMode)
-		SDL_RenderCopy(gdc.renderer, scanlinerTexture, NULL, screenRect);
-
-	GUI->RedrawStatusBar();
-	if (GUI->InMenu())
-		SDL_RenderCopy(gdc.renderer, GUI->defaultTexture, NULL, screenRect);
-
-	SDL_RenderPresent(gdc.renderer);
-	SDL_UnlockMutex(displayModeMutex);
+    //SDL_SaveBMP(surface, "pmd.bmp");
+   //SDL_FreeSurface(surface);
 }
 //---------------------------------------------------------------------------
 void ScreenPMD85::FillBuffer(BYTE *videoRam, bool needRedraw)
 {
-	// test if there is something to draw and we're not locked in another thread...
-	if (!(videoRam && needRedraw && SDL_TryLockMutex(displayModeMutex) == 0))
-		return;
+	if (!(videoRam && needRedraw))
+    return;
 
 	bool colorace = (colorProfile == CP_COLORACE);
-	int i, w, h = bufferHeight, c2717 = (width384mode ? 0 : 0x40);
+	int i, w = 320, h = 240, c2717 = (width384mode ? 0 : 0x40);
 	BYTE a[4] = { pAttr[0], pAttr[1], pAttr[2], pAttr[3] }, b, c, d, e;
 
 	if (blinkingEnabled && blinkState)
 		a[2] = a[3] = 0;
 
-	DWORD *ptr;
-	BYTE *dst;
-	SDL_LockTexture(screenTexture, NULL, (void **) &dst, &w);
+	int xOffset = (320 - 288) / 2;
+	int yOffset = (256 - 240);
+
+	videoRam += yOffset * 64;
+
+	for (int y = 0; y < 240; y++) {
+		if (y >= 256 - yOffset) break;
+
+		uint16_t *ptr = gdc.lcd_fb + (y * 320) + xOffset;  // Start at the centered position
 
-	while (h--) {
-		ptr = (DWORD *) dst;
 		for (i = 0; i < 48; i++) {
 			b = videoRam[i];
 			d = (b & 0xC0) >> 6;
 
 			if (colorace) {
-				e = videoRam[i + ((h & 1) ? 64 : -64)];
+				e = videoRam[i + ((y & 1) ? 64 : -64)];
 				c = (e & 0xC0) >> 6;
 				c = pAttr[d | c | ((d & c) ? 0 : 4)];
 			}
@@ -233,119 +226,52 @@ void ScreenPMD85::FillBuffer(BYTE *videoRam, bool needRedraw)
 			else
 				c = *a;
 
-			for (d = 0x01; d != c2717; d <<= 1)
-				*ptr++ = palette[((b & d) ? c : 0)];
+			for (d = 0x01; d != c2717; d <<= 1) {
+				*ptr++ = (b & d) ? 255 : ((c >> 3) << 11) | ((c >> 2) << 5) | (c >> 3);
+			}
 		}
 
-		dst += w;
 		videoRam += 64;
 	}
 
-	SDL_UnlockTexture(screenTexture);
-	SDL_UnlockMutex(displayModeMutex);
+
 }
 //---------------------------------------------------------------------------
 void ScreenPMD85::InitVideoMode(TDisplayMode reqDispMode, bool reqWidth384)
 {
-	SDL_LockMutex(displayModeMutex);
 	ReleaseVideoMode();
 
+	int fb_fd = open ("/dev/fb", O_RDWR);
+	gdc.lcd_fb = mmap (0, 320 * 240 * 2, 3, 1, fb_fd, 0);
+
+    int i, j;
+    for (i = 0; i < 240; i++)
+        for (j = 0; j < 320; j++)
+            gdc.lcd_fb[j + i * 320] = 0;
+
 	// debug("Screen", "InitVideoMode: %d, %s", reqDispMode, reqWidth384 ? "true" : "false");
 
 	dispMode = reqDispMode;
 	width384mode = reqWidth384;
 
-	if (dispMode == DM_FULLSCREEN)
-		reqDispMode = DM_QUINTUPLESIZE;
-
-	while (true) {
-		switch (reqDispMode) {
-			default:
-			case DM_NORMAL:
-				screenWidth  = (reqWidth384) ? 384 : 288;
-				screenHeight = 256;
-				break;
-
-			case DM_DOUBLESIZE:
-				screenWidth  = (reqWidth384) ? 768 : 576;
-				screenHeight = 512;
-				break;
-
-			case DM_TRIPLESIZE:
-				screenWidth  = (reqWidth384) ? 1152 : 864;
-				screenHeight = 768;
-				break;
-
-			case DM_QUADRUPLESIZE:
-				screenWidth  = (reqWidth384) ? 1536 : 1152;
-				screenHeight = 1024;
-				break;
-
-			case DM_QUINTUPLESIZE:
-				screenWidth  = (reqWidth384) ? 1920 : 1440;
-				screenHeight = 1280;
-				break;
-
-		}
-
-		if (dispMode == DM_FULLSCREEN) {
-			if (screenWidth > gdc.w || screenHeight + STATUSBAR_HEIGHT > gdc.h) {
-				if (reqDispMode == DM_QUINTUPLESIZE)
-					reqDispMode = DM_QUADRUPLESIZE;
-				else if (reqDispMode == DM_QUADRUPLESIZE)
-					reqDispMode = DM_TRIPLESIZE;
-				else if (reqDispMode == DM_TRIPLESIZE)
-					reqDispMode = DM_DOUBLESIZE;
-				else if (reqDispMode == DM_DOUBLESIZE)
-					reqDispMode = DM_NORMAL;
-				else {
-					dispMode = DM_NORMAL;
-					break;
-				}
-
-				continue;
-			}
-		}
-
-		break;
-	}
+	screenWidth  = (reqWidth384) ? 384 : 288;
+	screenHeight = 256;
 
 	bufferWidth  = (reqWidth384) ? 384 : 288;
 	bufferHeight = 256;
 
 	screenRect = new SDL_Rect;
 
-	if (dispMode == DM_FULLSCREEN) {
-		screenRect->w = screenWidth;
-		screenRect->h = screenHeight;
-
-		screenHeight += STATUSBAR_HEIGHT;
-		screenRect->x = (gdc.w - screenWidth) / 2;
-		screenRect->y = (gdc.h - screenHeight) / 2;
+		screenRect->w = gdc.w;
+		screenRect->h = gdc.h;
 
-		screenWidth   = gdc.w;
-		screenHeight  = gdc.h;
+		screenHeight = gdc.h + STATUSBAR_HEIGHT;
+		screenRect->x = 0;
+		screenRect->y = 0;
 
 		debug("Screen", "Full-screen mode: %dx%d -> viewport: %dx%d",
 				screenWidth, screenHeight, screenRect->w, screenRect->h);
 
-		SDL_SetWindowFullscreen(gdc.window, SDL_WINDOW_FULLSCREEN_DESKTOP);
-	}
-	else {
-		screenRect->x = borderSize;
-		screenRect->y = borderSize;
-		screenRect->w = screenWidth;
-		screenRect->h = screenHeight;
-
-		screenWidth  += (borderSize * 2);
-		screenHeight += (borderSize * 2) + STATUSBAR_HEIGHT;
-
-		debug("Screen", "Windowed mode: %dx%d -> viewport: %dx%d",
-				screenWidth, screenHeight, screenRect->w, screenRect->h);
-
-		SDL_SetWindowFullscreen(gdc.window, 0);
-		SDL_SetWindowSize(gdc.window, screenWidth, screenHeight);
-	}
 
 	SDL_Event event;
 	int waitForResize = WEAK_REFRESH_TIME;
@@ -359,14 +285,6 @@ void ScreenPMD85::InitVideoMode(TDisplayMode reqDispMode, bool reqWidth384)
 		SDL_Delay(1);
 	}
 
-	if (SDL_RenderSetLogicalSize(gdc.renderer, screenWidth, screenHeight) != 0)
-		error("Screen", "Unable to change screen resolution\n%s", SDL_GetError());
-	SDL_RenderSetViewport(gdc.renderer, NULL);
-
-	screenTexture = SDL_CreateTexture(gdc.renderer, SDL_PIXELFORMAT_DEFAULT,
-			SDL_TEXTUREACCESS_STREAMING, bufferWidth, bufferHeight);
-	if (!screenTexture)
-		error("Screen", "Unable to create screen texture\n%s", SDL_GetError());
 
 	int midOfStatus = SDL_max(1,
 			(screenHeight - screenRect->h - screenRect->y - STATUSBAR_HEIGHT) / 2);
@@ -380,36 +298,12 @@ void ScreenPMD85::InitVideoMode(TDisplayMode reqDispMode, bool reqWidth384)
 	GUI->InitStatusBarTexture();
 	GUI->InitDefaultTexture(bufferWidth, bufferHeight);
 
-	PrepareScanliner();
 	PrepareScreen();
-
-	SDL_RenderPresent(gdc.renderer);
-	SDL_UnlockMutex(displayModeMutex);
 }
 //-----------------------------------------------------------------------------
 void ScreenPMD85::PrepareScreen()
 {
-	SDL_SetRenderDrawColor(gdc.renderer, 0, 0, 0, SDL_ALPHA_OPAQUE);
-	SDL_RenderClear(gdc.renderer);
-
-	SDL_Rect *r = new SDL_Rect(*screenRect);
-	SDL_SetRenderDrawColor(gdc.renderer, 16, 16, 16, SDL_ALPHA_OPAQUE);
-
-	if (dispMode == DM_FULLSCREEN || borderSize > 0) {
-		int i = GetMultiplier() * 2;
-		r->x -= i;
-		r->y -= i;
-		r->w += i * 2;
-		r->h += i * 2;
-
-		SDL_RenderDrawRect(gdc.renderer, r);
-	}
-	else {
-		int y = screenHeight - STATUSBAR_HEIGHT;
-		SDL_RenderDrawLine(gdc.renderer, r->x, y, r->x + r->w, y);
-	}
 
-	delete r;
 }
 //-----------------------------------------------------------------------------
 void ScreenPMD85::PrepareScanliner()
